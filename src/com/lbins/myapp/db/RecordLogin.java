package com.lbins.myapp.db;

import de.greenrobot.dao.DaoException;


// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table RECORD_LOGIN.
 */
public class RecordLogin {

    /** Not-null value. */
    private String id;
    /** Not-null value. */
    private String emp_id;
    /** Not-null value. */
    private String dateline;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient RecordLoginDao myDao;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public RecordLogin() {
    }

    public RecordLogin(String id) {
        this.id = id;
    }

    public RecordLogin(String id, String emp_id, String dateline) {
        this.id = id;
        this.emp_id = emp_id;
        this.dateline = dateline;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getRecordLoginDao() : null;
    }

    /** Not-null value. */
    public String getId() {
        return id;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setId(String id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getEmp_id() {
        return emp_id;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setEmp_id(String emp_id) {
        this.emp_id = emp_id;
    }

    /** Not-null value. */
    public String getDateline() {
        return dateline;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setDateline(String dateline) {
        this.dateline = dateline;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
