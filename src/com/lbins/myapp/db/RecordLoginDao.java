package com.lbins.myapp.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table RECORD_LOGIN.
*/
public class RecordLoginDao extends AbstractDao<RecordLogin, String> {

    public static final String TABLENAME = "RECORD_LOGIN";

    /**
     * Properties of entity RecordLogin.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Emp_id = new Property(1, String.class, "emp_id", false, "EMP_ID");
        public final static Property Dateline = new Property(2, String.class, "dateline", false, "DATELINE");
    };

    private DaoSession daoSession;


    public RecordLoginDao(DaoConfig config) {
        super(config);
    }
    
    public RecordLoginDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'RECORD_LOGIN' (" + //
                "'ID' TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "'EMP_ID' TEXT NOT NULL ," + // 1: emp_id
                "'DATELINE' TEXT NOT NULL );"); // 2: dateline
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'RECORD_LOGIN'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, RecordLogin entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getId());
        stmt.bindString(2, entity.getEmp_id());
        stmt.bindString(3, entity.getDateline());
    }

    @Override
    protected void attachEntity(RecordLogin entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public RecordLogin readEntity(Cursor cursor, int offset) {
        RecordLogin entity = new RecordLogin( //
            cursor.getString(offset + 0), // id
            cursor.getString(offset + 1), // emp_id
            cursor.getString(offset + 2) // dateline
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, RecordLogin entity, int offset) {
        entity.setId(cursor.getString(offset + 0));
        entity.setEmp_id(cursor.getString(offset + 1));
        entity.setDateline(cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(RecordLogin entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(RecordLogin entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
