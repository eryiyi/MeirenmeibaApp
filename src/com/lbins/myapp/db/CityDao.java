package com.lbins.myapp.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import com.lbins.myapp.entity.City;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CITY.
*/
public class CityDao extends AbstractDao<City, String> {

    public static final String TABLENAME = "CITY";

    /**
     * Properties of entity City.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Cid = new Property(0, String.class, "cid", true, "CID");
        public final static Property Cityid = new Property(1, String.class, "cityid", false, "CITYID");
        public final static Property Areaid = new Property(2, String.class, "areaid", false, "AREAID");
        public final static Property CityName = new Property(3, String.class, "cityName", false, "CITY_NAME");
    };

    private DaoSession daoSession;


    public CityDao(DaoConfig config) {
        super(config);
    }
    
    public CityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CITY' (" + //
                "'CID' TEXT PRIMARY KEY NOT NULL ," + // 0: cid
                "'CITYID' TEXT," + // 1: cityid
                "'AREAID' TEXT," + // 2: areaid
                "'CITY_NAME' TEXT);"); // 3: cityName
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CITY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, City entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getCid());
 
        String cityid = entity.getCityid();
        if (cityid != null) {
            stmt.bindString(2, cityid);
        }
 
        String areaid = entity.getAreaid();
        if (areaid != null) {
            stmt.bindString(3, areaid);
        }
 
        String cityName = entity.getCityName();
        if (cityName != null) {
            stmt.bindString(4, cityName);
        }
    }

    @Override
    protected void attachEntity(City entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public City readEntity(Cursor cursor, int offset) {
        City entity = new City( //
            cursor.getString(offset + 0), // cid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // cityid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // areaid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // cityName
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, City entity, int offset) {
        entity.setCid(cursor.getString(offset + 0));
        entity.setCityid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAreaid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCityName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(City entity, long rowId) {
        return entity.getCid();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(City entity) {
        if(entity != null) {
            return entity.getCid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
